// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpoonFeed.Persistence;

#nullable disable

namespace SpoonFeed.Persistence.Migrations
{
    [DbContext(typeof(SpoonFeedDbContext))]
    partial class SpoonFeedDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SpoonFeed.Domain.Models.Courier", b =>
                {
                    b.Property<Guid>("UserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AccountBalance")
                        .HasColumnType("float");

                    b.Property<int>("CourierStatus")
                        .HasColumnType("int");

                    b.Property<float>("DeliveryRange")
                        .HasColumnType("real");

                    b.Property<int>("TransportType")
                        .HasColumnType("int");

                    b.HasKey("UserIdentityId");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("UserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Bonuses")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserIdentityId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvalidAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodChain", b =>
                {
                    b.Property<Guid>("UserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserIdentityId");

                    b.HasIndex("ImageId");

                    b.ToTable("FoodChains");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodFacility", b =>
                {
                    b.Property<Guid>("UserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<Guid>("FoodChainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserIdentityId");

                    b.HasIndex("FoodChainId");

                    b.ToTable("FoodFacilities");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MenuItemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FoodFacilityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("MenuItemCategoryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.MenuItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FoodFacilityId");

                    b.ToTable("MenuItemCategories");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FoodFacilityUserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FoodFacilityUserIdentityId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.OrderPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPositions");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerUserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerUserIdentityId");

                    b.ToTable("Review");

                    b.HasDiscriminator().HasValue("Review");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoodFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FoodFacilityId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.UserDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.UserIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.CourierReview", b =>
                {
                    b.HasBaseType("SpoonFeed.Domain.Models.Review");

                    b.Property<Guid>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReviewType")
                        .HasColumnType("int");

                    b.HasIndex("CourierId");

                    b.HasDiscriminator().HasValue("CourierReview");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodFacilityReview", b =>
                {
                    b.HasBaseType("SpoonFeed.Domain.Models.Review");

                    b.Property<Guid>("FoodFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasIndex("FoodFacilityId");

                    b.HasDiscriminator().HasValue("FoodFacilityReview");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Courier", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.UserIdentity", "UserIdentity")
                        .WithOne()
                        .HasForeignKey("SpoonFeed.Domain.Models.Courier", "UserIdentityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Customer", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.UserIdentity", "UserIdentity")
                        .WithOne()
                        .HasForeignKey("SpoonFeed.Domain.Models.Customer", "UserIdentityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Discount", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.MenuItem", "MenuItem")
                        .WithMany("Discounts")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodChain", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("SpoonFeed.Domain.Models.UserIdentity", "UserIdentity")
                        .WithOne()
                        .HasForeignKey("SpoonFeed.Domain.Models.FoodChain", "UserIdentityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodFacility", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.FoodChain", "FoodChain")
                        .WithMany("Facilities")
                        .HasForeignKey("FoodChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.UserIdentity", "UserIdentity")
                        .WithOne()
                        .HasForeignKey("SpoonFeed.Domain.Models.FoodFacility", "UserIdentityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("SpoonFeed.Domain.Owned.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("FoodFacilityUserIdentityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("StateOrRegion")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("FoodFacilityUserIdentityId");

                            b1.ToTable("FoodFacilities");

                            b1.WithOwner()
                                .HasForeignKey("FoodFacilityUserIdentityId");
                        });

                    b.OwnsOne("SpoonFeed.Domain.Owned.WorkingHours", "WorkingHours", b1 =>
                        {
                            b1.Property<Guid>("FoodFacilityUserIdentityId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("FoodFacilityUserIdentityId");

                            b1.ToTable("FoodFacilities");

                            b1.WithOwner()
                                .HasForeignKey("FoodFacilityUserIdentityId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("FoodChain");

                    b.Navigation("UserIdentity");

                    b.Navigation("WorkingHours")
                        .IsRequired();
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.MenuItem", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.FoodFacility", "FoodFacility")
                        .WithMany("MenuItems")
                        .HasForeignKey("FoodFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.MenuItemCategory", "MenuItemCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuItemCategoryId");

                    b.Navigation("Currency");

                    b.Navigation("FoodFacility");

                    b.Navigation("Image");

                    b.Navigation("MenuItemCategory");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.MenuItemCategory", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.FoodFacility", "FoodFacility")
                        .WithMany("MenuItemCategories")
                        .HasForeignKey("FoodFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodFacility");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Order", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.Courier", "Courier")
                        .WithMany("Orders")
                        .HasForeignKey("CourierId");

                    b.HasOne("SpoonFeed.Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.FoodFacility", null)
                        .WithMany("Orders")
                        .HasForeignKey("FoodFacilityUserIdentityId");

                    b.OwnsOne("SpoonFeed.Domain.Owned.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("StateOrRegion")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Courier");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.OrderPosition", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.Order", "Order")
                        .WithMany("OrderPositions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Review", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.Customer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerUserIdentityId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Transaction", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.Courier", "Courier")
                        .WithMany("Transactions")
                        .HasForeignKey("CourierId");

                    b.HasOne("SpoonFeed.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpoonFeed.Domain.Models.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SpoonFeed.Domain.Models.FoodFacility", "FoodFacility")
                        .WithMany("Transactions")
                        .HasForeignKey("FoodFacilityId");

                    b.Navigation("Courier");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("FoodFacility");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.UserDocument", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.UserIdentity", "Owner")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.CourierReview", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.Courier", "Courier")
                        .WithMany("CourierReviews")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodFacilityReview", b =>
                {
                    b.HasOne("SpoonFeed.Domain.Models.FoodFacility", "FoodFacility")
                        .WithMany("FoodFacilityReviews")
                        .HasForeignKey("FoodFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodFacility");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Courier", b =>
                {
                    b.Navigation("CourierReviews");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodChain", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.FoodFacility", b =>
                {
                    b.Navigation("FoodFacilityReviews");

                    b.Navigation("MenuItemCategories");

                    b.Navigation("MenuItems");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.MenuItem", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.MenuItemCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderPositions");
                });

            modelBuilder.Entity("SpoonFeed.Domain.Models.UserIdentity", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
